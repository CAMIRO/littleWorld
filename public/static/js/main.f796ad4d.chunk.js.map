{"version":3,"sources":["components/launchItem.js","components/launches.js","components/launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","to","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","message","console","log","launches","map","key","Launch","client","ApolloClient","uri","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"gOAiBeA,EAfI,SAAC,GAKX,IAAD,IALcC,OAClBC,EAII,EAJJA,cACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,kBAEI,EADJC,eAEA,OACI,6BACI,wCAAeF,GACf,qCAAYC,GACZ,kBAAC,IAAD,CAAME,GAAE,kBAAaJ,IAArB,oB,uMCNZ,IAAMK,EAAiBC,YAAH,KA2BLC,EAhBE,WAAO,IAAD,EACcC,YAASH,GAAlCI,EADW,EACXA,QAASC,EADE,EACFA,MAAOC,EADL,EACKA,KACxB,OAAGF,EAAgB,aACfC,EAAa,UAAN,OAAiBA,EAAME,UAClCC,QAAQC,IAAIH,GAER,oCAEIA,EAAKI,SAASC,KAAI,SAAAjB,GAAM,OACpB,kBAAC,EAAD,CAAakB,IAAKlB,EAAOC,cAAeD,OAAQA,UChBjDmB,EARA,WACX,OACI,wCCGFC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,aAcQC,EAXH,WACV,OACA,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,yBAAyBC,UAAWP,OCJxCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLG,QAAQH,MAAMA,EAAME,c","file":"static/js/main.f796ad4d.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nconst LaunchItem = ({ launch: { \n    flight_number, \n    mission_name, \n    launch_date_local, \n    launch_success\n} }) => {\n    return (\n        <div>\n            <h4>Mission: { mission_name }</h4>\n            <p>Date : { launch_date_local }</p>\n            <Link to={`/launch/${flight_number}`}>Details Launch</Link>\n        </div>\n    )\n}\n\nexport default LaunchItem\n","import React from 'react'\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from '@apollo/react-hooks';\n// components\nimport LaunchItem from './launchItem'\n\nconst LAUNCHES_QUERY = gql`\n  {\n    launches {\n        flight_number \n        mission_name\n        launch_date_local\n        launch_success\n    }\n}\n`;\n\nconst Launches = () => {\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n    if(loading) return 'loading...'\n    if (error) return `Error! ${error.message}`;\n    console.log(data)\n    return (\n        <>\n        {\n            data.launches.map(launch => (\n                <LaunchItem  key={launch.flight_number} launch={launch} />\n            ))\n        }  \n        </>\n    )\n}\n\nexport default Launches\n","import React from 'react'\n\nconst Launch = () => {\n    return (\n        <div>\n           launch \n        </div>\n    )\n}\n\nexport default Launch\n","\nimport React from 'react'\nimport ApolloClient from 'apollo-boost';  \nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { BrowserRouter as Router, Route } from 'react-router-dom' \nimport Launches from './components/launches';\nimport Launch from './components/launch'\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nconst App = () => {\n  return (\n  <ApolloProvider client={client}>\n    <Router>\n      <Route exact path=\"/\" component={Launches} />\n      <Route exact path=\"/launch/:flight_number\" component={Launch} />\n    </Router >\n  </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}